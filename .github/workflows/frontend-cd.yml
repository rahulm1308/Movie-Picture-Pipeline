name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Linting:
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Verify Cache Path
        run: ls -la starter/frontend/

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'starter/frontend/package-lock.json'

      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Lint
        working-directory: starter/frontend
        run: npm run lint

  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'starter/frontend/package-lock.json'

      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Tests
        working-directory: starter/frontend
        run: npm run test

  Build:
    needs: [Linting, Test]
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'starter/frontend/package-lock.json'

      - name: Build Docker Image
        working-directory: starter/frontend
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=frontend-app:latest .
          echo "Docker image built:"
          echo "Listing images with frontend-app:"
          docker images | grep frontend-app

  Push_to_ECR:
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: us-east-1

      - name: Push Docker Image to Amazon ECR
        run: |
          docker tag frontend-app:latest 427848260902.dkr.ecr.us-east-1.amazonaws.com/frontend-app:latest
          docker push 427848260902.dkr.ecr.us-east-1.amazonaws.com/frontend-app:latest

  Deploy:
    needs: [Push_to_ECR]
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Update Kubernetes deployment
        run: |
          kubectl set image deployment/frontend frontend=427848260902.dkr.ecr.us-east-1.amazonaws.com/frontend-app:latest
          kubectl rollout status deployment/frontend
